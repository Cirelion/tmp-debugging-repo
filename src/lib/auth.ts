import { getCloudflareContext } from "@opennextjs/cloudflare"
import { betterAuth } from "better-auth"
import { drizzleAdapter } from "better-auth/adapters/drizzle"

import * as schema from "@/db/schema"

import { getDb } from "./db"

/**
 * Better Auth server configuration with Cloudflare Workers runtime support
 *
 * This uses a getter function instead of a constant to access Cloudflare bindings
 * at request time, since they're not available during module initialization.
 *
 * Configured with:
 * - Drizzle ORM adapter for PostgreSQL via Hyperdrive
 * - Discord OAuth provider
 * - Google OAuth provider
 * - Runtime access to JWT_SECRET and other Worker bindings
 */
export async function getAuth() {
  const { env } = await getCloudflareContext({ async: true })
  const db = await getDb()

  return betterAuth({
    database: drizzleAdapter(db, {
      provider: "pg",
      schema: schema,
    }),

    // Use the secret from Cloudflare Worker bindings (generated by Alchemy)
    secret: env.JWT_SECRET,

    // Base URL for authentication endpoints
    baseURL: env.BETTER_AUTH_URL || "http://localhost:3000",

    // Trusted origins for CORS
    trustedOrigins: [env.NEXT_PUBLIC_APP_URL || "http://localhost:3000"],

    // Social authentication providers
    socialProviders: {
      discord: {
        clientId: env.DISCORD_CLIENT_ID!,
        clientSecret: env.DISCORD_CLIENT_SECRET!,
      },
      google: {
        clientId: env.GOOGLE_CLIENT_ID!,
        clientSecret: env.GOOGLE_CLIENT_SECRET!,
      },
    },
  })
}
